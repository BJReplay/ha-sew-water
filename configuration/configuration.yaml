# If you have an existing recorder entry, or an existing exclude sub-entity, just add sensor.water_usage_mains
recorder:
  exclude:
    entities:
      # Disable recorder making entries for water usage
      # It causes miscalculations with the retrospective imports
      - sensor.water_usage_mains
      # If you don't have a recycled water meter, don't add the entry for sensor.water_usage_recycled
      #- sensor.water_usage_recycled


# Define main sensors for tracking water usage - this is what historical records are imported to
template:
- sensor:
    # Tracking water usage - mains
    - name: "Water Usage Mains"
      unique_id: water_usage_mains
      device_class: water
      state_class: total
      unit_of_measurement: "L"
      state: "{{ states('sensor.current_water_mains_usage') | float }}"
      attributes:
        sum: "{{ state_attr('sensor.current_water_mains_usage', 'sum') }}"
# If you don't have a recycled water meter, don't add the entry for sensor.water_usage_recycled
#- sensor:
#    # Tracking water usage - recycled
#    - name: "Water Usage Recycled"
#      unique_id: water_usage_recycled
#      device_class: water
#      state_class: total
#      unit_of_measurement: "L"
#      state: "{{ states('sensor.current_water_usage_recycled') | float }}"
#      attributes:
#        sum: "{{ state_attr('sensor.current_water_usage_recycled', 'sum') }}"


# These sensors serve to give the main water sensors a consistent/up to date state that can 'persist' restarts
sql:
  - name: "Current Water Mains Usage"
    unique_id: current_water_mains_usage
    unit_of_measurement: "L"
    device_class: water
    column: "sum"
    query: >
      SELECT
        max(statistics.state) as sum
      FROM
        statistics statistics
        INNER JOIN statistics_meta ON statistics.metadata_id = statistics_meta.id
      WHERE
        statistics_meta.statistic_id = 'sensor.water_usage_mains'
  # If you don't have a recycled water meter, don't add the entry for current_water_usage_recycled
  #- name: "Current Water Usage Recycled"
  #  unique_id: current_water_usage_recycled
  #  unit_of_measurement: "L"
  #  device_class: water
  #  column: "sum"
  #  query: >
  #    SELECT
  #      max(statistics.state) as sum
  #    FROM
  #      statistics statistics
  #      INNER JOIN statistics_meta ON statistics.metadata_id = statistics_meta.id
  #    WHERE
  #      statistics_meta.statistic_id = 'sensor.water_usage_recycled'        
